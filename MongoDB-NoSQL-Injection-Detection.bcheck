metadata:
    language: v2-beta
    name: "MongoDB NoSQL Injection Detection"
    description: "Error-based, boolean-blind and Collaborator OOB checks for MongoDB injection vectors."
    author: "You"

define:
    payload_err = "'"
    # Common NoSQL-style payloads (injection into JSON-like params)
    payload_mongo_true = "{\"$ne\": null}"
    payload_mongo_false = "{\"$eq\": null}"

given insertion point then

    send payload: appending: {payload_err}
    if {latest.response} matches "(?i)MongoError|E11000 duplicate key error|BSONError|cannot parse|bad query|Command failed" then
        report issue: name: "MongoDB NoSQL Injection (Error-Based)" severity: high confidence: certain remediation: "Avoid building queries from user input; use safe query APIs and whitelist input." detail: "MongoDB-related error observed after appending payload; possible NoSQL injection."
    end if

    send payload called true_check: appending: {payload_mongo_true}
    send payload called false_check: appending: {payload_mongo_false}
    if {true_check.response} differs from {false_check.response} then
        report issue: name: "MongoDB NoSQL Injection (Boolean-Based)" severity: high confidence: firm remediation: "Use parameterized query builders and validate types/structures." detail: "Responses differ for NoSQL boolean-style payloads; possible injection."
    end if

    send request called collab_check: method: "GET" headers: "Referer": {generate_collaborator_address()} path: "/"
    if dns interactions then
        report issue: name: "MongoDB NoSQL Injection (Out-of-Band)" severity: high confidence: certain remediation: "Avoid using untrusted inputs in code that can trigger external network activity." detail: "Burp Collaborator observed DNS interactions after a collaborator-containing request; possible OOB injection."
    end if
