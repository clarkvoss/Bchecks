metadata:
    language: v2-beta
    name: "Oracle SQL Injection Detection"
    description: "Error-based, boolean-blind and Collaborator OOB checks for Oracle DB (parser-safe, non-destructive)."
    author: "You"

define:
    payload_err = "'"
    payload_true = "' AND 1=1--"
    payload_false = "' AND 1=2--"
    # payload_sleep = "' AND (SELECT DBMS_LOCK.SLEEP(5) FROM DUAL)=0--"   # uncomment only if your Burp supports timing
    # payload_utl = "'; BEGIN UTL_INADDR.GET_HOST_ADDRESS(''test.' || {generate_collaborator_address()} || '''); END;--"  # commented: enable only with authorization

given insertion point then

    # 1) Error-based: append single-quote and look for Oracle error strings
    send payload: appending: {payload_err}
    if {latest.response} matches "(?i)ORA-01756|ORA-00933|missing expression|ORA-[0-9]{3,}" then
        report issue: name: "Oracle SQL Injection (Error-Based)" severity: high confidence: certain remediation: "Use bind variables and parameterized queries; hide detailed DB errors." detail: "Oracle error text observed after appending a quote; possible error-based SQLi."
    end if

    # 2) Boolean-based blind: send simple true/false payloads and compare responses
    send payload called true_check: appending: {payload_true}
    send payload called false_check: appending: {payload_false}
    if {true_check.response} differs from {false_check.response} then
        report issue: name: "Oracle SQL Injection (Boolean-Based Blind)" severity: high confidence: firm remediation: "Sanitize inputs and use bind variables/parameterized queries." detail: "Responses differ between boolean true and false payloads; possible boolean-blind SQLi."
    end if

    # Optional: Time-based blind using DBMS_LOCK.SLEEP (commented â€” enable only if your Burp supports timing)
    # send payload: appending: {payload_sleep}
    # if ({latest.response.time} - {base.response.time}) >= 4.5 then
    #     report issue: name: "Oracle SQL Injection (Time-Based Blind - sec)" severity: high confidence: tentative remediation: "Use bind variables and avoid dynamic SQL; limit long-running queries." detail: "Response delayed by DBMS_LOCK.SLEEP payload (~5s); timing indicates possible blind SQLi."
    # end if
    #
    # If your Burp exposes time_ms instead, use:
    # send payload: appending: {payload_sleep}
    # if ({latest.response.time_ms} - {base.response.time_ms}) >= 4500 then
    #     report issue: name: "Oracle SQL Injection (Time-Based Blind - ms)" severity: high confidence: tentative remediation: "Use bind variables and avoid dynamic SQL; limit long-running queries." detail: "Response delayed by DBMS_LOCK.SLEEP payload (~5s); timing indicates possible blind SQLi."
    # end if

given insertion point then

    # 3) Safe OOB: Collaborator via header (non-destructive)
    send request called collab_header_check: method: "GET" headers: "Referer": {generate_collaborator_address()} path: "/"
    if dns interactions then
        report issue: name: "Oracle SQL Injection (Out-of-Band)" severity: high confidence: certain remediation: "Disable unnecessary PL/SQL packages and avoid using untrusted input in code that can trigger external network calls." detail: "Burp Collaborator observed DNS interactions after sending a request containing the collaborator address in a header; possible OOB SQLi."
    end if
