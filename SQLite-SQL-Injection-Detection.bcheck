metadata:
    language: v2-beta
    name: "SQLite SQL Injection Detection"
    description: "Error-based, boolean-blind and Collaborator OOB checks for SQLite."
    author: "You"

define:
    payload_err = "'"
    payload_true = "' AND 1=1--"
    payload_false = "' AND 1=2--"

given insertion point then

    send payload: appending: {payload_err}
    if {latest.response} matches "(?i)sqlite3::exception|sqlite3 error|near \".*\": syntax error|malformed" then
        report issue: name: "SQLite SQL Injection (Error-Based)" severity: high confidence: certain remediation: "Use parameter binding and avoid string concatenation." detail: "SQLite error text observed after appending a quote; possible error-based SQLi."
    end if

    send payload called true_check: appending: {payload_true}
    send payload called false_check: appending: {payload_false}
    if {true_check.response} differs from {false_check.response} then
        report issue: name: "SQLite SQL Injection (Boolean-Based)" severity: high confidence: firm remediation: "Use parameter binding and input validation." detail: "Responses differ between boolean true and false payloads; possible boolean blind SQLi."
    end if

    send request called collab_check: method: "GET" headers: "Referer": {generate_collaborator_address()} path: "/"
    if dns interactions then
        report issue: name: "SQLite SQL Injection (Out-of-Band)" severity: high confidence: certain remediation: "Avoid using untrusted input in code that triggers external network calls." detail: "Burp Collaborator observed DNS interactions after sending a request containing the collaborator address; OOB injection possible."
    end if
